# Home Assistant Configuration for Smart Water Level Sensor (HTTP) with Multi-Interval Alerts
# This sensor will be created automatically via HTTP API calls

# Input helpers for calibration (created automatically by ESP32)
# These will appear in your Home Assistant interface:
# - input_number.tank_height
# - input_number.empty_distance  
# - input_number.full_distance
# - input_number.tank_diameter
# - input_button.calibrate_sensor

# Alert configuration inputs (created automatically by ESP32):
# - input_number.low_level_threshold
# - input_number.rapid_leak_threshold (15min)
# - input_number.moderate_leak_threshold (30min)
# - input_number.high_consumption_threshold (1hour)
# - input_number.leak_detection_threshold
# - input_number.alert_cooldown

# Optional: Add to your dashboard
# Add this to your Lovelace dashboard configuration
views:
  - title: Water Level Monitoring
    path: water-level
    type: custom:grid-layout
    badges: []
    cards:
      - type: vertical-stack
        cards:
          - type: custom:mini-graph-card
            name: Water Level
            entity: sensor.water_level_sensor
            line_color: "#2196F3"
            fill_color: "#2196F3"
            points_per_hour: 20
            hours_to_show: 24
            min: 0
            max: 100
            
          - type: gauge
            name: Current Level
            entity: sensor.water_level_sensor
            min: 0
            max: 100
            severity:
              green: 0
              yellow: 20
              red: 10
            
          - type: entities
            title: Current Status
            entities:
              - entity: sensor.water_level_sensor
                name: Water Level
              - type: attribute
                entity: sensor.water_level_sensor
                attribute: volume_liters
                name: Volume (L)
              - type: attribute
                entity: sensor.water_level_sensor
                attribute: consumption_15min_l_15min
                name: 15-Min Consumption (L/15min)
              - type: attribute
                entity: sensor.water_level_sensor
                attribute: consumption_30min_l_30min
                name: 30-Min Consumption (L/30min)
              - type: attribute
                entity: sensor.water_level_sensor
                attribute: hourly_consumption_l_hour
                name: Hourly Consumption (L/h)
              - type: attribute
                entity: sensor.water_level_sensor
                attribute: daily_consumption_l_day
                name: Daily Consumption (L/day)
              - type: attribute
                entity: sensor.water_level_sensor
                attribute: distance_cm
                name: Distance (cm)
              - type: attribute
                entity: sensor.water_level_sensor
                attribute: signal_strength_dbm
                name: WiFi Signal (dBm)
              - type: attribute
                entity: sensor.water_level_sensor
                attribute: is_calibrated
                name: Calibrated

# Calibration Dashboard
  - title: Sensor Calibration
    path: calibration
    type: custom:grid-layout
    badges: []
    cards:
      - type: vertical-stack
        cards:
          - type: entities
            title: Tank Dimensions
            entities:
              - entity: input_number.tank_height
                name: Tank Height
              - entity: input_number.tank_diameter
                name: Tank Diameter
              
          - type: entities
            title: Distance Calibration
            entities:
              - entity: input_number.empty_distance
                name: Empty Distance
              - entity: input_number.full_distance
                name: Full Distance
              
          - type: entities
            title: Actions
            entities:
              - entity: input_button.calibrate_sensor
                name: Save Calibration
              
          - type: markdown
            content: |
              ## Calibration Instructions:
              
              1. **Measure your tank dimensions** and set them above
              2. **Empty your tank** and note the distance reading
              3. **Fill your tank** and note the distance reading
              4. **Set the distances** in the fields above
              5. **Click "Save Calibration"** to apply settings
              
              The sensor will automatically calculate accurate water levels and volumes!

# Alert Monitoring Dashboard
  - title: Alert Monitoring
    path: alerts
    type: custom:grid-layout
    badges: []
    cards:
      - type: vertical-stack
        cards:
          - type: entities
            title: Alert Thresholds
            entities:
              - entity: input_number.low_level_threshold
                name: Low Level Threshold (%)
              - entity: input_number.rapid_leak_threshold
                name: Rapid Leak Threshold (L/15min)
              - entity: input_number.moderate_leak_threshold
                name: Moderate Leak Threshold (L/30min)
              - entity: input_number.high_consumption_threshold
                name: High Consumption Threshold (L/h)
              - entity: input_number.leak_detection_threshold
                name: Leak Detection Threshold (L/h)
              - entity: input_number.alert_cooldown
                name: Alert Cooldown (minutes)
              
          - type: entities
            title: Current Alerts
            entities:
              - entity: sensor.water_alert
                name: Water Alert Status
              - type: attribute
                entity: sensor.water_alert
                attribute: alert_message
                name: Alert Message
              - type: attribute
                entity: sensor.water_alert
                attribute: alert_type
                name: Alert Type
              
          - type: custom:mini-graph-card
            name: Multi-Interval Consumption
            entities:
              - entity: sensor.water_level_sensor
                attribute: consumption_15min_l_15min
                name: 15-Min Consumption
              - entity: sensor.water_level_sensor
                attribute: consumption_30min_l_30min
                name: 30-Min Consumption
              - entity: sensor.water_level_sensor
                attribute: hourly_consumption_l_hour
                name: Hourly Consumption
            line_color: "#FF9800"
            fill_color: "#FF9800"
            points_per_hour: 4
            hours_to_show: 6
            min: 0

# Automations for alerts and monitoring
automation:
  - alias: "Save Water Level Calibration"
    description: "Save calibration data when calibrate button is pressed"
    trigger:
      platform: state
      entity_id: input_button.calibrate_sensor
      to: "pressed"
    action:
      - service: persistent_notification.create
        data:
          title: "Calibration Saved"
          message: "Water level sensor calibration has been saved. The sensor will restart to apply new settings."
      - delay: "00:00:02"
      - service: input_button.press
        target:
          entity_id: input_button.calibrate_sensor

  - alias: "Low Water Level Alert"
    description: "Send notification when water level is low"
    trigger:
      platform: state
      entity_id: sensor.water_alert
      to: "low_level"
    action:
      - service: persistent_notification.create
        data:
          title: "üö® Low Water Level Alert"
          message: "{{ states('sensor.water_alert') }} - Water level is critically low!"
      - service: notify.mobile_app
        data:
          title: "üö® Low Water Level"
          message: "Water level is at {{ states('sensor.water_level_sensor') }}% - Please check your tank!"

  - alias: "Rapid Leak Alert (15min)"
    description: "Send urgent notification for rapid leak detection"
    trigger:
      platform: state
      entity_id: sensor.water_alert
      to: "rapid_leak"
    action:
      - service: persistent_notification.create
        data:
          title: "üö® RAPID LEAK DETECTED!"
          message: "{{ states('sensor.water_alert') }} - Critical leak detected in 15 minutes!"
      - service: notify.mobile_app
        data:
          title: "üö® RAPID LEAK DETECTED!"
          message: "Critical leak: {{ states('sensor.water_level_sensor') | attr('consumption_15min_l_15min') }} L/15min - CHECK IMMEDIATELY!"

  - alias: "Moderate Leak Alert (30min)"
    description: "Send notification for moderate leak detection"
    trigger:
      platform: state
      entity_id: sensor.water_alert
      to: "moderate_leak"
    action:
      - service: persistent_notification.create
        data:
          title: "‚ö†Ô∏è MODERATE LEAK DETECTED"
          message: "{{ states('sensor.water_alert') }} - Moderate leak detected in 30 minutes!"
      - service: notify.mobile_app
        data:
          title: "‚ö†Ô∏è MODERATE LEAK DETECTED"
          message: "Moderate leak: {{ states('sensor.water_level_sensor') | attr('consumption_30min_l_30min') }} L/30min - Check soon!"

  - alias: "High Water Consumption Alert"
    description: "Send notification for high water consumption"
    trigger:
      platform: state
      entity_id: sensor.water_alert
      to: "high_consumption"
    action:
      - service: persistent_notification.create
        data:
          title: "‚ö†Ô∏è High Water Consumption"
          message: "{{ states('sensor.water_alert') }} - Unusual water usage detected!"
      - service: notify.mobile_app
        data:
          title: "‚ö†Ô∏è High Water Consumption"
          message: "High water usage detected: {{ states('sensor.water_level_sensor') | attr('hourly_consumption_l_hour') }} L/hour"

  - alias: "Leak Detection Alert"
    description: "Send urgent notification for possible leak"
    trigger:
      platform: state
      entity_id: sensor.water_alert
      to: "leak_detected"
    action:
      - service: persistent_notification.create
        data:
          title: "üö® LEAK DETECTED!"
          message: "{{ states('sensor.water_alert') }} - Possible water leak detected!"
      - service: notify.mobile_app
        data:
          title: "üö® LEAK DETECTED!"
          message: "Possible leak: {{ states('sensor.water_level_sensor') | attr('hourly_consumption_l_hour') }} L/hour - Check immediately!"

  - alias: "Daily Water Consumption Report"
    description: "Send daily water consumption summary"
    trigger:
      platform: time
      at: "08:00:00"
    condition:
      - condition: numeric_state
        entity_id: sensor.water_level_sensor
        attribute: daily_consumption_l_day
        above: 0
    action:
      - service: notify.mobile_app
        data:
          title: "üìä Daily Water Report"
          message: |
            Yesterday's water consumption: {{ states('sensor.water_level_sensor') | attr('daily_consumption_l_day') | round(1) }} L
            Current level: {{ states('sensor.water_level_sensor') }}%
            Average daily: {{ states('sensor.water_level_sensor') | attr('average_daily_consumption_l_day') | round(1) }} L

# Template sensors for additional calculations
template:
  - sensor:
      - name: "Days Until Empty"
        unique_id: "water_days_until_empty"
        state: >
          {% set current_level = states('sensor.water_level_sensor') | float %}
          {% set daily_usage = states('sensor.water_level_sensor') | attr('average_daily_consumption_l_day') | float %}
          {% if daily_usage > 0 and current_level > 0 %}
            {% set current_volume = states('sensor.water_level_sensor') | attr('volume_liters') | float %}
            {{ (current_volume / daily_usage) | round(1) }}
          {% else %}
            0
          {% endif %}
        unit_of_measurement: "days"
        device_class: "duration"
        
      - name: "Water Usage Trend"
        unique_id: "water_usage_trend"
        state: >
          {% set current_usage = states('sensor.water_level_sensor') | attr('hourly_consumption_l_hour') | float %}
          {% set avg_usage = states('sensor.water_level_sensor') | attr('average_daily_consumption_l_day') | float / 24 %}
          {% if avg_usage > 0 %}
            {% if current_usage > avg_usage * 1.5 %}
              High
            {% elif current_usage < avg_usage * 0.5 %}
              Low
            {% else %}
              Normal
            {% endif %}
          {% else %}
            Normal
          {% endif %}
        device_class: "enum"
        
      - name: "Leak Severity"
        unique_id: "water_leak_severity"
        state: >
          {% set rapid_leak = states('sensor.water_level_sensor') | attr('consumption_15min_l_15min') | float %}
          {% set moderate_leak = states('sensor.water_level_sensor') | attr('consumption_30min_l_30min') | float %}
          {% set rapid_threshold = states('input_number.rapid_leak_threshold') | float %}
          {% set moderate_threshold = states('input_number.moderate_leak_threshold') | float %}
          {% if rapid_leak > rapid_threshold %}
            Critical
          {% elif moderate_leak > moderate_threshold %}
            Moderate
          {% else %}
            None
          {% endif %}
        device_class: "enum"

# HTTP Setup Instructions:
# 1. Create a Long-Lived Access Token in Home Assistant:
#    - Go to your profile in Home Assistant
#    - Scroll down to "Long-Lived Access Tokens"
#    - Create a new token with a descriptive name
#    - Copy the token (you'll only see it once)
#
# 2. Update the ESP32 code with your settings:
#    - homeAssistantUrl: Your Home Assistant domain (e.g., "https://home.nexoralabs.com")
#    - accessToken: Your long-lived access token
#    - sensorEntityId: The entity ID for the sensor (e.g., "sensor.water_level_sensor")
#
# 3. Upload the code to your ESP32
#
# 4. The sensor and all entities will be created automatically in Home Assistant
#    - Entity ID: sensor.water_level_sensor
#    - Shows water level as percentage with volume calculation
#    - Includes multi-interval consumption monitoring and alert system

# Multi-Interval Monitoring Features:
# - 15-minute rapid leak detection (most sensitive)
# - 30-minute moderate leak detection (balanced)
# - 1-hour consumption monitoring (standard)
# - 24-hour daily consumption tracking
# - Configurable thresholds for each interval
# - Different alert priorities based on time intervals
# - Mobile notifications with appropriate urgency levels
# - Real-time consumption graphs for all intervals
# - Leak severity classification

# Alert Priority Levels:
# üö® CRITICAL: Rapid leak (15min) - Immediate action required
# ‚ö†Ô∏è MODERATE: Moderate leak (30min) - Check soon
# ‚ö†Ô∏è HIGH: High consumption (1hour) - Monitor usage
# üö® URGENT: Low water level - Refill needed

# Security Benefits of HTTP over MQTT:
# - No MQTT broker needed
# - Uses Home Assistant's built-in authentication
# - Access tokens can be revoked easily
# - No additional network services exposed
# - Simpler firewall configuration
# - Uses standard HTTPS/HTTP ports

# Troubleshooting:
# - Check serial monitor for HTTP response codes
# - Verify Home Assistant URL is accessible from ESP32
# - Ensure access token is valid and not expired
# - Check Home Assistant logs for API errors
# - Verify entity ID doesn't conflict with existing sensors
# - All entities should appear automatically after first upload 